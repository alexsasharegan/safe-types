// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Option.match should go ðŸ’¥  with never 1`] = `"invalid Option variant"`;

exports[`Option.toJSON should serialize None as null: toJSON 1`] = `"null"`;

exports[`Option.toJSON should serialize None as null: toJSON 2`] = `
"{
  \\"x\\": \\"foo\\",
  \\"y\\": {
    \\"bar\\": null
  }
}"
`;

exports[`Option.toJSON should serialize Some as itself: toJSON 1`] = `"\\"string\\""`;

exports[`Option.toJSON should serialize Some as itself: toJSON 2`] = `"\\"\\""`;

exports[`Option.toJSON should serialize Some as itself: toJSON 3`] = `"true"`;

exports[`Option.toJSON should serialize Some as itself: toJSON 4`] = `"false"`;

exports[`Option.toJSON should serialize Some as itself: toJSON 5`] = `"0"`;

exports[`Option.toJSON should serialize Some as itself: toJSON 6`] = `"1"`;

exports[`Option.toJSON should serialize Some as itself: toJSON 7`] = `"{}"`;

exports[`Option.toJSON should serialize Some as itself: toJSON 8`] = `
"[
  \\"something complex\\",
  1,
  {
    \\"foo\\": \\"bar\\"
  }
]"
`;

exports[`Option.toJSON should serialize Some as itself: toJSON 9`] = `
"{
  \\"array\\": [
    1,
    2,
    3
  ],
  \\"obj\\": {
    \\"foo\\": \\"bar\\"
  },
  \\"num\\": 123,
  \\"bool\\": true,
  \\"maybeCopy\\": {
    \\"array\\": [
      1,
      2,
      3
    ],
    \\"obj\\": {
      \\"foo\\": \\"bar\\"
    },
    \\"num\\": 123,
    \\"bool\\": true
  }
}"
`;

exports[`Option.toString with None: toString 1`] = `"None"`;

exports[`Option.toString with Some: toString 1`] = `"Some<[1,2,3]>"`;

exports[`Option.unwrap should throw Error with None 1`] = `[Error: Called 'Option.unwrap()' on None]`;
